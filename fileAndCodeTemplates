Create Entities React Component
---------------------------------
${NAME}/ui/${NAME}/${NAME}
tsx
import { useTranslation } from 'react-i18next';
import { ReactNode } from 'react';
import { classNames } from 'shared/lib/classNames/classNames';
import cls from "./${NAME}.module.scss"

interface ${NAME}Props {
    className?: string,
    children?: ReactNode
}

export const ${NAME} = (props: ${NAME}Props) => {
    const {
        children,
        className,
    } = props;

    const { t } = useTranslation();

    const mods: Record<string, boolean> = {

    };

    return (
        <div className={classNames(cls.${NAME.toLowerCase()}, mods, [className])}>
            {children}
        </div>
    );
};

---------------------------------
${NAME}/index
ts
---------------------------------
${NAME}/model/types/${NAME.toLowerCase()}
ts
---------------------------------
${NAME}/model/slice/${NAME.toLowerCase()}Slice
test.ts
---------------------------------
${NAME}/model/slice/${NAME.toLowerCase()}Slice
ts
---------------------------------
${NAME}/model/services/fetch${NAME}/fetch${NAME}
test.ts
---------------------------------
${NAME}/model/services/fetch${NAME}/fetch${NAME}
ts
---------------------------------
${NAME}/model/selectors/get${NAME}/get${NAME}
test.ts
---------------------------------
${NAME}/model/selectors/get${NAME}/get${NAME}
ts
---------------------------------
${NAME}/ui/${NAME}/${NAME}
test.tsx
import { render, screen } from '@testing-library/react';
import { ${NAME} } from './${NAME}';

describe('${NAME}', () => {
    test('Test render', () => {
        render(<${NAME}>TEST</${NAME}>);
        expect(screen.getByText('TEST')).toBeInTheDocument();
    });

    test('Test clear theme', () => {
        render(<${NAME}>TEST</${NAME}>);
        expect(screen.getByText('TEST')).toHaveClass('');
        screen.debug();
    });
});
---------------------------------
${NAME}/ui/${NAME}/${NAME}
stories.tsx
import React from 'react';
import { ComponentMeta, ComponentStory } from '@storybook/react';
import { ${NAME} } from './${NAME}';

export default {
    title: 'shared/${NAME}',
    component: ${NAME},
    argTypes: {
        backgroundColor: { control: 'color' },
    },
} as ComponentMeta<typeof ${NAME}>;

const Template: ComponentStory<typeof ${NAME}> = (args) => <${NAME} {...args} />;

export const Primary = Template.bind({});
Primary.args = {
};
---------------------------------
${NAME}/ui/${NAME}/${NAME}
module.scss
.${NAME.toLowerCase()}{

}
-------------------********************************--------------
Create Shared React Component
---------------------------------
${NAME}/${NAME}
import { useTranslation } from 'react-i18next';
import { ReactNode } from 'react';
import { classNames } from 'shared/lib/classNames/classNames';
import cls from "./${NAME}.module.scss"

interface ${NAME}Props {
    className?: string,
    children?: ReactNode
}

export const ${NAME} = (props: ${NAME}Props) => {
    const {
        children,
        className,
    } = props;

    const { t } = useTranslation();

    const mods: Record<string, boolean> = {

    };

    return (
        <div className={classNames(cls.${NAME.toLowerCase()}, mods, [className])}>
            {children}
        </div>
    );
};
---------------------------------
${NAME}/${NAME}
test.tsx
import { render, screen } from '@testing-library/react';
import { ${NAME} } from 'shared/ui/${NAME}/${NAME}';

describe('${NAME}', () => {
    test('Test render', () => {
        render(<${NAME}>TEST</${NAME}>);
        expect(screen.getByText('TEST')).toBeInTheDocument();
    });

    test('Test clear theme', () => {
        render(<${NAME}>TEST</${NAME}>);
        expect(screen.getByText('TEST')).toHaveClass('');
        screen.debug();
    });
});
---------------------------------
${NAME}/${NAME}
stories.tsx
import React from 'react';
import { ComponentMeta, ComponentStory } from '@storybook/react';
import { ${NAME} } from 'shared/ui/${NAME}/${NAME}';

export default {
    title: 'shared/${NAME}',
    component: ${NAME},
    argTypes: {
        backgroundColor: { control: 'color' },
    },
} as ComponentMeta<typeof ${NAME}>;

const Template: ComponentStory<typeof ${NAME}> = (args) => <${NAME} {...args} />;

export const Primary = Template.bind({});
Primary.args = {
};
---------------------------------
${NAME}/${NAME}
module.scss
.${NAME.toLowerCase()}{

}
---------------------------------
